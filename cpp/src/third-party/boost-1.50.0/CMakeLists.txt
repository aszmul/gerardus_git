##########################################################################
# Copyright (C) 2012 Daniel Pfeifer <daniel@pfeifer-mail.de>             #
#                                                                        #
# Distributed under the Boost Software License, Version 1.0.             #
# See accompanying file LICENSE_1_0.txt or copy at                       #
#   http://www.boost.org/LICENSE_1_0.txt                                 #
##########################################################################

## Minor changes by Ramon Casero <rcasero@gmail.com> for project
## Gerardus

cmake_minimum_required(VERSION 2.8.8 FATAL_ERROR)
project(Boost)

list(APPEND CMAKE_MODULE_PATH "${Boost_SOURCE_DIR}/ryppl/cmake/Modules")

set(RYPPL_INITIAL_PASS TRUE CACHE BOOL "")

#add_subdirectory(boost/accumulators)
#add_subdirectory(boost/algorithm)
#add_subdirectory(boost/any)
#add_subdirectory(boost/array)
#add_subdirectory(boost/asio)
#add_subdirectory(boost/assign)
#add_subdirectory(boost/auto_index)
#add_subdirectory(boost/bimap)
#add_subdirectory(boost/bind)
#add_subdirectory(boost/boostbook)
add_subdirectory(boost/chrono)
#add_subdirectory(boost/circular_buffer)
#add_subdirectory(boost/compatibility)
#add_subdirectory(boost/concept_check)
add_subdirectory(boost/config)
#add_subdirectory(boost/container)
#add_subdirectory(boost/context)
#add_subdirectory(boost/conversion)
add_subdirectory(boost/core)
#add_subdirectory(boost/crc)
add_subdirectory(boost/date_time)
#add_subdirectory(boost/disjoint_sets)
#add_subdirectory(boost/dynamic_bitset)
#add_subdirectory(boost/exception)
add_subdirectory(boost/filesystem)
#add_subdirectory(boost/flyweight)
#add_subdirectory(boost/foreach)
#add_subdirectory(boost/format)
#add_subdirectory(boost/function_types)
#add_subdirectory(boost/function)
#add_subdirectory(boost/functional)
#add_subdirectory(boost/functional_hash)
#add_subdirectory(boost/fusion)
#add_subdirectory(boost/geometry)
#add_subdirectory(boost/gil)
#add_subdirectory(boost/graph_parallel)
#add_subdirectory(boost/graph)
#add_subdirectory(boost/heap)
#add_subdirectory(boost/icl)
#add_subdirectory(boost/inspect)
#add_subdirectory(boost/integer)
#add_subdirectory(boost/interprocess)
#add_subdirectory(boost/intrusive)
#add_subdirectory(boost/io)
#add_subdirectory(boost/iostreams)
#add_subdirectory(boost/iterator)
#add_subdirectory(boost/lambda)
#add_subdirectory(boost/local_function)
#add_subdirectory(boost/locale)
#add_subdirectory(boost/logic)
#add_subdirectory(boost/math)
#add_subdirectory(boost/move)
#add_subdirectory(boost/mpi)
#add_subdirectory(boost/mpl)
#add_subdirectory(boost/msm)
#add_subdirectory(boost/multi_array)
#add_subdirectory(boost/multi_index)
#add_subdirectory(boost/numeric_conversion)
#add_subdirectory(boost/numeric_interval)
#add_subdirectory(boost/optional)
#add_subdirectory(boost/parameter)
#add_subdirectory(boost/phoenix)
#add_subdirectory(boost/polygon)
#add_subdirectory(boost/pool)
#add_subdirectory(boost/preprocessor)
#add_subdirectory(boost/program_options)
#add_subdirectory(boost/property_map)
#add_subdirectory(boost/property_tree)
#add_subdirectory(boost/proto)
#add_subdirectory(boost/ptr_container)
#add_subdirectory(boost/python)
#add_subdirectory(boost/quickbook)
#add_subdirectory(boost/random)
#add_subdirectory(boost/range)
#add_subdirectory(boost/ratio)
#add_subdirectory(boost/rational)
#add_subdirectory(boost/regex)
#add_subdirectory(boost/scope_exit)
#add_subdirectory(boost/serialization)
#add_subdirectory(boost/signals)
#add_subdirectory(boost/signals2)
#add_subdirectory(boost/smart_ptr)
#add_subdirectory(boost/spirit)
#add_subdirectory(boost/spirit_classic)
#add_subdirectory(boost/statechart)
#add_subdirectory(boost/static_assert)
add_subdirectory(boost/system)
#add_subdirectory(boost/test)
add_subdirectory(boost/thread)
#add_subdirectory(boost/timer)
#add_subdirectory(boost/tokenizer)
#add_subdirectory(boost/tr1)
#add_subdirectory(boost/tti)
#add_subdirectory(boost/tuple)
#add_subdirectory(boost/type_traits)
#add_subdirectory(boost/typeof)
#add_subdirectory(boost/ublas)
#add_subdirectory(boost/units)
#add_subdirectory(boost/unordered)
#add_subdirectory(boost/utility)
#add_subdirectory(boost/uuid)
#add_subdirectory(boost/variant)
#add_subdirectory(boost/wave)
#add_subdirectory(boost/xpressive)

if(RYPPL_INITIAL_PASS)
  set(RYPPL_INITIAL_PASS FALSE CACHE BOOL "" FORCE)
  # report an error in order to inhibit the generation step (save time).
  message(FATAL_ERROR
    "Initial pass successfully completed, now run again!"
    )
endif(RYPPL_INITIAL_PASS)
